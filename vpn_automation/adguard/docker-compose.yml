version: '3.8'

services:
  adguard-home:
    image: adguard/adguardhome:latest
    container_name: adguard-home
    restart: unless-stopped
    ports:
      # Web interface
      - "3000:3000"
      # DNS over HTTPS
      - "443:443"
      # DNS over TLS
      - "853:853"
      # DNS over QUIC
      - "784:784"
      # Standard DNS
      - "53:53/udp"
      - "53:53/tcp"
    volumes:
      # Configuration
      - ./AdGuardHome.yaml:/opt/adguardhome/conf/AdGuardHome.yaml:ro
      # Working directory
      - adguard_data:/opt/adguardhome/work
      # Filters and logs
      - adguard_logs:/opt/adguardhome/logs
      # Custom filters
      - ./custom_filters:/opt/adguardhome/filters:ro
      # SSL certificates
      - ./certs:/opt/adguardhome/certs:ro
    environment:
      - TZ=UTC
      - ADGUARD_HOME_CONFIG=/opt/adguardhome/conf/AdGuardHome.yaml
    networks:
      - adguard_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/control/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adguard.rule=Host(`dns.example.com`)"
      - "traefik.http.routers.adguard.entrypoints=websecure"
      - "traefik.http.routers.adguard.tls.certresolver=letsencrypt"
      - "traefik.http.services.adguard.loadbalancer.server.port=3000"
      - "traefik.tcp.routers.adguard-dns.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.adguard-dns.entrypoints=dns"
      - "traefik.tcp.services.adguard-dns.loadbalancer.server.port=53"

  # Optional: Traefik reverse proxy for SSL termination
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - adguard_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.example.com`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    depends_on:
      - adguard-home

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - adguard_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.example.com`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    networks:
      - adguard_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.example.com`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - adguard_network
    command: redis-server --appendonly yes --requirepass redis123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Backup service
  backup:
    image: alpine:latest
    container_name: adguard-backup
    restart: "no"
    volumes:
      - adguard_data:/data:ro
      - ./backups:/backups
    networks:
      - adguard_network
    command: |
      sh -c '
        echo "Creating backup..."
        tar -czf /backups/adguard-backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /data .
        echo "Backup completed"
        find /backups -name "adguard-backup-*.tar.gz" -mtime +7 -delete
      '

volumes:
  adguard_data:
    driver: local
  adguard_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  adguard_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
