version: '3.8'

services:
  streamline:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: streamline-vpn
    restart: unless-stopped
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # WebSocket
      - "9090:9090"  # Metrics
    environment:
      - STREAMLINE_ENV=production
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://streamline:password@postgres:5432/streamline
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PROMETHEUS_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data:rw
      - streamline-output:/app/output
      - streamline-logs:/app/logs
      - streamline-cache:/app/cache
    depends_on:
      - redis
      - postgres
      - elasticsearch
    networks:
      - streamline-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: streamline-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - streamline-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: streamline-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=streamline
      - POSTGRES_USER=streamline
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - streamline-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streamline"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: streamline-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - streamline-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: streamline-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - streamline-net
    depends_on:
      - elasticsearch

  prometheus:
    image: prom/prometheus:latest
    container_name: streamline-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - streamline-net

  grafana:
    image: grafana/grafana:latest
    container_name: streamline-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=streamline
      - GF_INSTALL_PLUGINS=redis-datasource,elasticsearch-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - streamline-net
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    container_name: streamline-nginx
    restart: unless-stopped
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - streamline-net
    depends_on:
      - streamline

networks:
  streamline-net:
    driver: bridge

volumes:
  streamline-output:
  streamline-logs:
  streamline-cache:
  redis-data:
  postgres-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
