---
# StreamlineVPN Production Deployment Configuration
# Implements enterprise-grade Kubernetes deployment with auto-scaling,
# security policies, and comprehensive monitoring as outlined in the
# technical implementation report.

apiVersion: v1
kind: Namespace
metadata:
  name: streamline-vpn
  labels:
    name: streamline-vpn
    app.kubernetes.io/name: streamline-vpn
    app.kubernetes.io/version: "1.0.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: streamline-vpn-config
  namespace: streamline-vpn
data:
  LOG_LEVEL: "INFO"
  REDIS_CLUSTER_NODES: "redis-node-1:7000,redis-node-2:7000,redis-node-3:7000"
  PROMETHEUS_ENDPOINT: "http://prometheus:9090"
  JWT_SECRET_KEY: "your-jwt-secret-key-here"
  CACHE_TTL: "300"
  ML_MODEL_PATH: "/app/models"
  MAX_CONCURRENT_CONNECTIONS: "10000"
  RATE_LIMIT_REQUESTS: "1000"
  RATE_LIMIT_WINDOW: "60"

---
apiVersion: v1
kind: Secret
metadata:
  name: streamline-vpn-secrets
  namespace: streamline-vpn
type: Opaque
data:
  # Base64 encoded secrets
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWtleS1oZXJl  # your-jwt-secret-key-here
  redis-password: cmVkaXMtcGFzc3dvcmQ=  # redis-password
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5zdHJlYW1saW5ldnBuLmNvbS9zdHJlYW1saW5ldnBu  # postgresql://user:pass@db.streamlinevpn.com/streamlinevpn

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streamline-vpn
  namespace: streamline-vpn
  labels:
    app: streamline-vpn
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: streamline-vpn
  template:
    metadata:
      labels:
        app: streamline-vpn
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 2000
        fsGroup: 2000
      serviceAccountName: streamline-vpn
      containers:
      - name: streamline-vpn
        image: streamline-vpn:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: streamline-vpn-config
              key: LOG_LEVEL
        - name: REDIS_CLUSTER_NODES
          valueFrom:
            configMapKeyRef:
              name: streamline-vpn-config
              key: REDIS_CLUSTER_NODES
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: streamline-vpn-secrets
              key: jwt-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: streamline-vpn-secrets
              key: redis-password
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: streamline-vpn-secrets
              key: database-url
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: models-volume
          mountPath: /app/models
          readOnly: true
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: models-volume
        configMap:
          name: ml-models-config
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "streamline-vpn"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: streamline-vpn-service
  namespace: streamline-vpn
  labels:
    app: streamline-vpn
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: streamline-vpn

---
apiVersion: v1
kind: Service
metadata:
  name: streamline-vpn-headless
  namespace: streamline-vpn
  labels:
    app: streamline-vpn
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: streamline-vpn

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: streamline-vpn-hpa
  namespace: streamline-vpn
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: streamline-vpn
  minReplicas: 3
  maxReplicas: 20
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: vpn_connections_active
      target:
        type: AverageValue
        averageValue: "100"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: streamline-vpn-pdb
  namespace: streamline-vpn
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: streamline-vpn

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: streamline-vpn-network-policy
  namespace: streamline-vpn
spec:
  podSelector:
    matchLabels:
      app: streamline-vpn
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: streamline-vpn
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 7000
  - to:
    - namespaceSelector:
        matchLabels:
          name: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: streamline-vpn
  namespace: streamline-vpn
  labels:
    app: streamline-vpn

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: streamline-vpn
  name: streamline-vpn-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: streamline-vpn-rolebinding
  namespace: streamline-vpn
subjects:
- kind: ServiceAccount
  name: streamline-vpn
  namespace: streamline-vpn
roleRef:
  kind: Role
  name: streamline-vpn-role
  apiGroup: rbac.authorization.k8s.io

---
# Redis Cluster Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: streamline-vpn
spec:
  serviceName: redis-cluster
  replicas: 3
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --cluster-enabled
        - "yes"
        - --cluster-config-file
        - /data/nodes.conf
        - --cluster-node-timeout
        - "5000"
        - --appendonly
        - "yes"
        - --appendfsync
        - "everysec"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /etc/redis
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: streamline-vpn
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  - port: 16379
    targetPort: 16379
    name: gossip
  selector:
    app: redis-cluster

---
# Prometheus Monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: streamline-vpn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: streamline-vpn
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus

---
# Grafana Dashboard
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: streamline-vpn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: grafana-data
        emptyDir: {}
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: streamline-vpn
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana

---
# Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamline-vpn-ingress
  namespace: streamline-vpn
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.streamlinevpn.com
    - dashboard.streamlinevpn.com
    secretName: streamline-vpn-tls
  rules:
  - host: api.streamlinevpn.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: streamline-vpn-service
            port:
              number: 8080
  - host: dashboard.streamlinevpn.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
